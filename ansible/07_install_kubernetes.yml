---
- hosts: master
  become: yes
  tasks:
    - name: Download containerd
      get_url:
        url: https://github.com/containerd/containerd/releases/download/v1.6.4/cri-containerd-1.6.4-linux-amd64.tar.gz
        dest: /tmp
        checksum: sha256:https://github.com/containerd/containerd/releases/download/v1.6.4/cri-containerd-1.6.4-linux-amd64.tar.gz.sha256sum
        mode: 0755

    - name: Unpack containerd
      unarchive:
        src: /tmp/cri-containerd-1.6.4-linux-amd64.tar.gz
        dest: /
        remote_src: yes

    - name: Create containerd configuration folder
      file:
        path: /etc/containerd/
        state: directory
        owner: root
        group: root
        mode: 0755

    - name: Generate default configuration
      shell: containerd config default
      register: containerd_config

    - name: Write containerd configuration
      copy:
        dest: /etc/containerd/config.toml
        content: "{{ containerd_config.stdout }}"
        owner: root
        group: root
        mode: 0744

    - name: Write containerd configuration
      copy:
        dest: /etc/containerd/config.toml
        content: "{{ containerd_config.stdout | sivel.toiletwater.from_toml | combine(crun_config, recursive=True) | sivel.toiletwater.to_toml }}"
        owner: root
        group: root
        mode: 0744
      vars:
        crun_config:
          plugins:
            io.containerd.grpc.v1.cri:
              containerd:
                default_runtime_name: crun
                runtimes:
                  crun:
                    pod_annotations:
                      - "*.wasm.*"
                      - "wasm.*"
                      - "module.wasm.image/*"
                      - "*.module.wasm.image"
                      - "module.wasm.image/variant.*"
                    runtime_type: io.containerd.runc.v2
                    options:
                      BinaryName: "/usr/local/bin/crun"
              registry:
                configs:
                  "localhost:5000":
                    tls:
                      insecure_skip_verify: true
                mirrors:
                  "localhost:5000":
                    endpoint:
                      - http://localhost:5000

            io.containerd.runtime.v1.linux:
              runtime: crun

    - name: Enable and start containerd service
      systemd:
        daemon_reload: yes
        name: containerd
        state: started
        enabled: yes

    - name: Add Google Cloud public key
      ansible.builtin.apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present

    - name: Add Kubernetes repository
      apt_repository:
        repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
        filename: kubernetes
        state: present

    - name: Install kubeadm, kubelet and kubectl
      apt:
        name:
          - kubeadm
          - kubelet
          - kubectl
        update_cache: yes

    - name: Disable swap
      shell: swapoff -a

    - name: Disable swap permanently
      mount:
        name: "swap"
        fstype: swap
        state: absent

    - name: Set kernel modules to load at boot
      copy:
        dest: /etc/modules-load.d/k8s.conf
        content: |-
          overlay
          br_netfilter

    - name: Load kernel modules
      community.general.modprobe:
        name: "{{ item }}"
      loop:
        - overlay
        - br_netfilter

    - name: Set sysctl parameters to load at boot
      copy:
        dest: /etc/sysctl.d/k8s.conf
        content: |-
          net.bridge.bridge-nf-call-iptables  = 1
          net.bridge.bridge-nf-call-ip6tables = 1
          net.ipv4.ip_forward                 = 1

    - name: Apply sysctl paramters
      shell: sysctl --system

    - name: Kubeadm init
      shell: kubeadm init --cri-socket=unix:///run/containerd/containerd.sock --kubernetes-version=stable-1.24

    - name: Create kube home
      file:
        path: "/home/{{ ansible_user }}/.kube"
        mode: 0700
        owner: "{{ ansible_user  }}"
        group: "{{ ansible_user }}"
        state: directory

    - name: Copy kube config
      copy:
        remote_src: yes
        src: /etc/kubernetes/admin.conf
        dest: "/home/{{ ansible_user }}/.kube/config"
        mode: 0700
        owner: "{{ ansible_user  }}"
        group: "{{ ansible_user }}"

    - name: Taint master
      become_user: "{{ ansible_user }}"
      shell: "kubectl taint node --all {{ item }}"
      loop:
        - node-role.kubernetes.io/master-
        - node-role.kubernetes.io/control-plane-

    - name: Download cilium
      get_url:
        url: https://github.com/cilium/cilium-cli/releases/download/v0.11.7/cilium-linux-amd64.tar.gz
        checksum: sha256:https://github.com/cilium/cilium-cli/releases/download/v0.11.7/cilium-linux-amd64.tar.gz.sha256sum
        dest: /tmp

    - name: Unpack cilium
      unarchive:
        src: /tmp/cilium-linux-amd64.tar.gz
        dest: /usr/local/bin
        remote_src: yes

    - name: Install cilium cni
      become_user: "{{ ansible_user }}"
      shell: cilium install --version=v1.11.5
